
{
  parserClass="com.github.alxmag.intellijfakersupport.lang.FakerParser"
  parserUtilClass="com.github.alxmag.intellijfakersupport.lang.FakerParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Faker"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.alxmag.intellijfakersupport.lang.psi"
  psiImplPackage="com.github.alxmag.intellijfakersupport.lang.psi.impl"

  elementTypeHolderClass="com.github.alxmag.intellijfakersupport.lang.psi.FakerTypes"
  elementTypeClass="com.github.alxmag.intellijfakersupport.lang.psi.FakerElementType"
  tokenTypeClass="com.github.alxmag.intellijfakersupport.lang.psi.FakerTokenType"

  tokens = [
    REGULAR_STRING_PART="regexp:(([^\\\"\#]) | (#[^{]))"
    EXPRESSION_LBRACE='#{'
    EXPRESSION_RBRACE='}'

    PARAM_BEGIN = "'"
    PARAM_END = "'"

    DOT='.'
    COMMA=','

    PARAMS_LIST_BEGIN="regexp:(\s)+"

    IDENTIFIER="regexp:[a-zA-Z]+[a-zA-Z0-9]+"
  ]

  extends("paramLiteral|paramExpression")=param
}

fakerFile ::= (regularString | expression)*
regularString ::= (REGULAR_STRING_PART)+ | ""
expression ::= EXPRESSION_LBRACE functionName paramsList? EXPRESSION_RBRACE {
  pin=1
}
functionName ::= IDENTIFIER (DOT IDENTIFIER)*
private paramsList ::= PARAMS_LIST_BEGIN quotedParam* {
  pin=1
}
private quotedParam ::= PARAM_BEGIN param PARAM_END (','|&'}') {
  pin=1
  recoverWhile=not_rbrace_or_next_quoted_param
}
param ::= paramLiteral | paramExpression
paramLiteral ::= (REGULAR_STRING_PART)+ | ""
paramExpression ::= EXPRESSION_LBRACE functionName EXPRESSION_RBRACE {
  pin=1
}

private not_rbrace_or_next_quoted_param ::= !('}'|quotedParam)